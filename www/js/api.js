let formats={};function canBegin(t){return t==="Finished"||t==="Dropped"||t==="Planned"||t===""}function canPause(t){return t==="Viewing"||t==="ReViewing"}function canResume(t){return t==="Paused"}async function listFormats(){if(Object.keys(formats).length>0)return formats;const t=await fetch(`${apiPath}/type/format`);return t.status!==200||(formats=await t.json()),formats}function mkStrItemId(t){return t.replace(/"ItemId":\s*(\d+),/,'"ItemId": "$1",').replace(/"ParentId":\s*(\d+),/,'"ParentId": "$1",').replace(/"CopyOf":\s*(\d+)(,)?/,'"CopyOf": "$1"$2').replace(/"Library":\s*(\d+)(,)?/,'"Library": "$1"$2')}function mkIntItemId(t){return t.replace(/"ItemId":"(\d+)",/,'"ItemId": $1,').replace(/"ParentId":"(\d+)",/,'"ParentId": $1,').replace(/"CopyOf":"(\d+)"(,)?/,'"CopyOf": $1$2').replace(/"Library":"(\d+)"(,)?/,'"Library": $1$2')}function parseJsonL(t){const e=["ItemId","ParentId","CopyOf","Library"];try{return JSON.parse(t,(n,i)=>e.includes(n)?BigInt(i):i)}catch(n){console.error("Could not parse json",n)}}async function loadList(t){const e=await fetch(`${apiPath}/${t}?uid=${uid}`);if(!e)return[];const n=await e.text();return n?n.split(`
`).filter(Boolean).map(mkStrItemId).map(parseJsonL):[]}async function copyUserInfo(t,e){return await fetch(`${apiPath}/engagement/copy?src-id=${t}&dest-id=${e}`).catch(console.error)}function typeToSymbol(t){const e={Show:"\u{1F4FA}\uFE0E",Movie:"\u{1F4FD}",MovieShort:"\u23EF",Book:"\u{1F4DA}\uFE0E",Manga:"\u672C",Game:"\u{1F3AE}\uFE0E",Song:"\u266B",Collection:"\u{1F5C4}",BoardGame:"\u{1F3B2}\uFE0E",Picture:"\u{1F5BC}",Meme:"\u{1F0CF}",Unowned:"X"};return t in e?e[t]:t}async function nameToFormat(t){let n=0;t=t.toLowerCase(),t.includes("+digital")&&(t=t.replace("+digital",""),n|=4096);const i=Object.fromEntries(Object.entries(await listFormats()).map(([r,a])=>[a,Number(r)]));return n|=i[t],n}async function formatToName(t){let n="";(t&4096)===4096&&(t-=4096,n=" +digital");const i=await listFormats();return t>=Object.keys(i).length?`unknown${n}`:`${i[t].toUpperCase()}${n}`}async function identify(t,e){return await fetch(`${apiPath}/metadata/identify?title=${encodeURIComponent(t)}&provider=${e}`)}async function finalizeIdentify(t,e,n){return t=encodeURIComponent(t),e=encodeURIComponent(e),await fetch(`${apiPath}/metadata/finalize-identify?identified-id=${t}&provider=${e}&apply-to=${n}`)}async function updateThumbnail(t,e){return await fetch(`${apiPath}/metadata/mod-entry?id=${t}&thumbnail=${encodeURIComponent(e)}`)}async function setParent(t,e){return await fetch(`${apiPath}/mod-entry?id=${t}&parent-id=${e}`)}async function doQuery3(t){const e=await fetch(`${apiPath}/query-v3?search=${encodeURIComponent(t)}&uid=${uid}`).catch(console.error);if(!e)return[];let n=await e.text();if(e.status!==200)return alert(n),[];try{return n.split(`
`).filter(Boolean).map(mkStrItemId).map(parseJsonL)}catch(i){console.error(i)}return[]}async function setPos(t,e){return fetch(`${apiPath}/engagement/mod-entry?id=${t}&current-position=${e}`)}function sortEntries(t,e){return e!=""&&(e=="rating"?t=t.sort((n,i)=>{let r=findUserEntryById(n.ItemId),a=findUserEntryById(i.ItemId);return!r||!a?0:a?.UserRating-r?.UserRating}):e=="cost"?t=t.sort((n,i)=>i.PurchasePrice-n.PurchasePrice):e=="general-rating"?t=t.sort((n,i)=>{let r=findMetadataById(n.ItemId),a=findMetadataById(i.ItemId);return!a||!r?0:normalizeRating(a.Rating,a.RatingMax||100)-normalizeRating(r.Rating,r.RatingMax||100)}):e=="rating-disparity"?t=t.sort((n,i)=>{let r=findMetadataById(n.ItemId),a=findUserEntryById(n.ItemId),o=findMetadataById(i.ItemId),s=findUserEntryById(i.ItemId);if(!o||!r)return 0;let d=normalizeRating(o.Rating,o.RatingMax||100),c=normalizeRating(r.Rating,r.RatingMax||100),u=Number(a?.UserRating),g=Number(s?.UserRating);return c-u-(d-g)}):e=="release-year"&&(t=t.sort((n,i)=>{let r=findMetadataById(n.ItemId);return(findMetadataById(i.ItemId)?.ReleaseYear||0)-(r?.ReleaseYear||0)}))),t}async function newEntry(t){let e="";for(let n in t){let i=t[n];if(typeof i=="bigint")i=String(i);else if(typeof i<"u")i=encodeURIComponent(i);else continue;e+=`${n}=${i}`}return await fetch(`${apiPath}/add-entry${e}`)}async function apiDeleteEvent(t,e,n){return await fetch(`${apiPath}/engagement/delete-event?id=${t}&after=${n}&timestamp=${e}`)}async function apiRegisterEvent(t,e,n,i){const r=Intl.DateTimeFormat().resolvedOptions().timeZone;return await fetch(`${apiPath}/engagement/register-event?name=${encodeURIComponent(e)}&id=${t}&after=${i}&timestamp=${n}&timezone=${encodeURIComponent(r)}`)}async function addEntryTags(t,e){return await fetch(`${apiPath}/add-tags?tags=${encodeURIComponent(e.join(""))}&id=${t}`)}async function deleteEntryTags(t,e){return await fetch(`${apiPath}/delete-tags?tags=${encodeURIComponent(e.join(""))}&id=${t}`)}async function deleteEntry(t){return await fetch(`${apiPath}/delete-entry?id=${t}`)}async function overwriteMetadataEntry(t){return fetch(`${apiPath}/metadata/fetch?id=${t}`)}async function updateInfoTitle(t,e){return fetch(`${apiPath}/mod-entry?id=${t}&en-title=${e}`)}
