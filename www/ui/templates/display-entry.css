@import "/css/colors.css";
@import "/css/general.css";
@import "/ui/css-styles/rating-styles.css";

@layer general, util, components;

@layer general {
    table {
        border-collapse: collapse;

        td,
        th {
            border: 1px solid var(--secondary);
        }
    }

    * {
        box-sizing: border-box;
    }

    input,
    button,
    select {
        border-color: var(--input-border-color);
        font-family: inherit;
    }

    select {

        /*select is colored wrong in safari*/
        @supports (-webkit-backdrop-filter: blur(1px)) {
            -webkit-appearance: none;
        }
    }

    hr {
        border-color: var(--secondary);
    }

    article {
        padding: var(--small-gap);
    }

    :host(display-entry) {
        --small-gap: 2ex;
    }
}

@layer util {

    /*for begin/finish/etc... action buttons*/
    .action {
        font-size: 1.2rem;
        aspect-ratio: 1 / 1;
        width: 35px;
    }

    .tag::before {
        content: "üè∑Ô∏é ";
        line-height: 0;
    }

    .delete {
        color: var(--error);
        border-color: var(--error);
    }
}

@layer components {
    :host(display-entry) {
        flex-grow: 1;
        /*-10px just incase*/
        min-width: calc(50cqw - var(--gap-size) - 10px);

        overflow: auto auto;

        @container (aspect-ratio < 1) {
            width: 100%;
        }

        @container (width < 800px) {
            min-height: 50%;
        }
    }

    #menu-bar {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(min(500px, 100%), 1fr));
        gap: var(--small-gap);
        column-rule: currentColor 1px dashed;

        margin-bottom: var(--small-gap);
    }

    #art-selectors {

        label {
            text-wrap: nowrap;
        }
    }

    #item-interactions {
        display: grid;
        grid-auto-flow: row;

        float: left;
        gap: 20px;

        margin: 0.4em 0 0 0.4em;

        button {
            aspect-ratio: 1 / 1;
            height: 35px;
        }
    }

    #root {
        width: 100%;
        height: fit-content;
        container: entry / inline-size;

        background-color: var(--main);

        color: var(--text-color);

        overflow: auto auto;
    }

    #thumbnail {
        border: 1px solid var(--blue);
        align-self: center;

        max-width: min(20cqw, 300px);

        cursor: pointer;
    }

    #cost-calculation-modifiers {
        width: 100%;
    }

    #thumbnail-fig {
        float: left;
        margin: 0;

        /*this way, everything in the middle of the page is cenetered nicely*/
        /*and the space to the right entirely belongs to the figure*/
        /* height: 90cqb; */

        font-size: min(1em, 3cqw);

        max-width: 40cqw;
        overflow: auto auto;

        width: min-width;

        hr {
            width: 100%;
            opacity: 50%;
            border-style: dotted;
        }

        @container entry (width < 450px) {
            float: none;

            display: flex;
            flex-direction: row;
            max-width: revert;
            flex-wrap: wrap;
            justify-content: center;
        }
    }

    #media-info {
        width: 100%;

        &:not(:has(tbody:has(tr))) {
            display: none;
        }
    }

    #cost::before {
        content: "$"
    }

    #new-event-button {
        align-self: center;
        width: 100%;
    }

    /*if the table has events, we no longer need the new event button*/
    #user-actions:has(*)+#new-event-button {
        display: none;
    }

    #user-actions {
        width: 100%;
        margin: 0 auto;

        text-align: center;

        counter-reset: event-no;

        .grid {
            grid-template-columns: 20% 1fr;
        }

        :is(td, th) {
            padding: 0.5em;
        }

        :is(td, th) button {
            width: fit-content;
            justify-self: center;
        }

        td:has(button) {
            text-align: center;
        }

        tr:has(button:is(:hover, :focus-visible)) {
            background: var(--secondary);
        }
    }

    #event-table-area {
        gap: 10px;
        overflow: auto auto;
        max-height: 30cqb;
    }

    #header-subtitle {
        display: flex;
        flex-direction: column;
        justify-content: center;

        text-align: center;

        gap: var(--small-gap);

        font-size: 0.85em;
    }

    #actions {
        justify-content: center;

        --gap-size: 20px;

        /*There are a couple of flexboxes within here to group thigns together*/
        &.flex,
        & .flex {
            gap: var(--gap-size);
        }
    }

    #tags {
        overflow: auto;
        display: flex;
        gap: 2ch;

        /*div containing the tags which includes the new tag button*/
        *:has(> &:not(:empty)) {
            gap: 2ch;
        }

        *:has(> &:empty) {
            display: none;
        }

        /*each div in #tags contains a delete button and the tag itself*/
        &>div {
            display: flex;
            text-wrap: nowrap;
        }
    }

    #create-tag {
        align-self: center;
        height: fit-content;

        /*the parent that has self, but does not have an element with class=tag*/
        /*if that matches, add " tag" after #create-tag's text to show that the + mean + tag*/
        :has(> &):not(:has(.tag)) #create-tag::after {
            content: " tag";
        }
    }

    button:has(~ .tag) {
        vertical-align: middle;
    }

    #item-interaction-menu {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(50px, 1fr));
        gap: calc(var(--small-gap) / 2);

        padding: 0
    }

    #descriptors {
        display: flex;
        gap: 2cqi;

        margin-top: var(--small-gap);
    }

    #descriptors>section {
        border: 5px solid var(--secondary);
        border-radius: calc(var(--border-roundness) * 5);
        flex-grow: 1;
        min-width: 100px;
        width: 50%;

        height: 30cqb;

        resize: both;
        overflow: auto;
    }

    #relationship-display {
        flex-wrap: wrap;
    }

    #relationship-display>section {
        margin: var(--small-gap) 0;

        width: auto;
    }

    #required-section {
        &:has(#required-items:not(:empty)) {
            display: block;
        }
        &:has(#required-items:empty) {
            display: none;
        }

        #required-items {
            justify-content: center;
        }

        img {
            cursor: pointer;
        }
    }

    :is(#description, #notes) {
        overflow: auto auto;

        /*since basically anything can be in these, create a new formatting context
         * so that overflow doesn't cross into the thumbnail-fig*/
        display: flow-root;

        max-height: 50cqb;

        /*if the image does not have a max width, it will cause overflow*/
        img {
            max-width: 100%;
        }
    }

    section:has(> #description:empty) {
        display: none;
    }

    #notes {
        white-space: pre-wrap;

        &:empty {
            height: fit-content;
        }

        justify-self: center;
    }


    hgroup {
        >* {
            text-wrap: balance;
        }

        margin-bottom: 10px;
    }

    #main-title {
        &[data-owner]::after {
            content: " (owner: " attr(data-owner) ")";
        }

        &::before {
            content: attr(data-type-icon) " ";
        }
    }

    #genres {
        padding: var(--small-gap);
    }

    #official-native-title {
        align-self: center;

        &:empty {
            display: none;
        }
    }

    :host(display-entry:not([data-user-status="Viewing"])) #entry-progressbar-position-label {
        display: none;
    }

    #view-count::before {
        content: "Viewed: "
    }

    #view-count::after {
        content: " times (" attr(data-time-spent, "Unknown") " hours)"
    }

    #entry-progressbar {
        justify-self: center;
        margin: 0;

        background: var(--blue);
        width: 100%;
        appearance: none;
    }

    #entry-progressbar-position-label {
        position: absolute;
        right: 0;

        line-height: 0;
        margin-top: -1cap;
        text-align: right;
        margin-right: calc(1ch);

        color: var(--main);
    }

    #entry-progressbar:where(:not([max]), [value="0"]) {
        display: none;

        /*this figcaption displays the x/y for how far along the user is*/
        &~figcaption {
            display: none;
        }
    }

    #entry-progressbar[max]::-moz-progress-bar,
    #entry-progressbar[max]::-webkit-progress-bar {
        background: var(--green);
    }

    #identify-items:popover-open {
        display: flex;
        flex-wrap: wrap;
    }

    #edit-notes {
        height: fit-content;
        align-self: center;
    }

    #notes-edit-dialog:popover-open {
        display: grid;
        grid-template-rows: min-content 1fr;
    }

    #notes-edit-box {
        height: 100%;
        border: none;
        margin: 0;
        display: inline-block;
    }

    #descendants-section,
    #copies-section {
        display: flex;
        flex-direction: column;
        flex-grow: 1;

        justify-content: center;

        button {
            height: fit-content;
            align-self: center;
        }

        div:first-child {
            display: flex;
            gap: var(--small-gap);
            justify-content: center;
        }
    }

    #descendants,
    #copies {
        display: flex;
        flex-grow: 1;

        align-items: center;

        &:not(:empty) {
            height: max(15cqb, 100px);
        }

        width: 100%;
        overflow: auto;

        gap: 2em;

        button {
            padding: 0.5em;
        }

        img {
            max-height: 100%;
            max-width: 100%;
            /*it's in a flex, the aspect-ratio gets messed up if other images of different heights are here*/
            /* height: fit-content; */
            cursor: pointer;
        }

        :not(img) {
            height: fit-content;
            align-self: center;
        }
    }
}
