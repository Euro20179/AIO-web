{
  "version": 3,
  "sources": ["sidebar.ts"],
  "sourcesContent": ["const sidebarItems = document.getElementById(\"sidebar-items\") as HTMLElement\n\nconst sidebarIntersected: Set<string> = new Set()\nconst sidebarObserver = new IntersectionObserver((entries) => {\n    for (let entry of entries) {\n        if (entry.isIntersecting) {\n            entry.target.dispatchEvent(new Event(\"on-screen-appear\"))\n        }\n    }\n}, {\n    root: document.getElementById(\"sidebar\"),\n    rootMargin: \"0px\",\n    threshold: 0.1\n})\n\nfunction clearSidebar() {\n\n    sidebarIntersected.clear()\n\n    while (sidebarItems.firstElementChild) {\n        sidebarObserver.unobserve(sidebarItems.firstElementChild)\n        sidebarItems.firstElementChild.remove()\n    }\n}\n\nfunction refreshSidebarItem(item: InfoEntry) {\n    let el = document.querySelector(`sidebar-entry[data-entry-id=\"${item.ItemId}\"]`) as HTMLElement\n    if (el) {\n        let user = findUserEntryById(item.ItemId)\n        let meta = findMetadataById(item.ItemId)\n        if (!user || !meta) return\n        changeSidebarItemData(item, user, meta, el)\n    } else {\n        renderSidebarItem(item)\n    }\n\n    let meta = findMetadataById(item.ItemId)\n    if(meta)\n        updateSidebarThumbnail(item.ItemId, meta?.Thumbnail)\n}\n\n\nfunction removeSidebarItem(item: InfoEntry) {\n    sidebarIntersected.delete(String(item.ItemId))\n\n    sidebarItems.querySelector(`[data-entry-id=\"${item.ItemId}\"]`)?.remove()\n}\n\nfunction updateSidebarEntryContents(item: InfoEntry, user: UserEntry, meta: MetadataEntry, el: ShadowRoot) {\n    const titleEl = el.getElementById(\"sidebar-title\") as HTMLInputElement\n    const imgEl = el.getElementById(\"sidebar-thumbnail\") as HTMLImageElement\n\n    //Title\n    titleEl.value = item.En_Title\n    titleEl.title = meta.Title\n\n    //thumbnail source is updated in `on-screen-appear` event as to make sure it doesn't request 300 images at once\n    imgEl.alt = \"thumbnail\"\n\n    //Type\n    let typeIcon = typeToSymbol(String(item.Type))\n    titleEl.setAttribute(\"data-type-icon\", typeIcon)\n\n    //Release year\n    if (meta.ReleaseYear)\n        titleEl.setAttribute(\"data-release-year\", String(meta.ReleaseYear))\n    else\n        titleEl.setAttribute(\"data-release-year\", \"unknown\")\n}\n\nfunction changeSidebarItemData(item: InfoEntry, user: UserEntry, meta: MetadataEntry, el: HTMLElement) {\n    const e = new CustomEvent(\"data-changed\", {\n        detail: {\n            item,\n            user,\n            meta,\n        }\n    })\n    el.dispatchEvent(e)\n    el.setAttribute(\"data-entry-id\", String(item.ItemId))\n}\n\nfunction sidebarEntryOpenMultiple(item: InfoEntry, mode: DisplayMode) {\n    clearItems()\n    selectItem(item, mode)\n}\n\nfunction sidebarEntryOpenOne(item: InfoEntry) {\n    toggleItem(item)\n}\n\nfunction updateSidebarThumbnail(id: bigint, src: string) {\n    const elem = sidebarItems.querySelector(`[data-entry-id=\"${id}\"]`)\n    if(!elem) return\n    let img = elem.shadowRoot?.querySelector(\"img\") as HTMLImageElement\n    img.src = src\n}\n\nfunction renderSidebarItem(item: InfoEntry, sidebarParent: HTMLElement | DocumentFragment = sidebarItems) {\n    let elem = document.createElement(\"sidebar-entry\")\n\n    sidebarObserver.observe(elem)\n\n    let meta = findMetadataById(item.ItemId)\n    let user = findUserEntryById(item.ItemId)\n    if (!user || !meta) return elem\n\n    sidebarParent.append(elem)\n\n    let img = elem.shadowRoot?.querySelector(\"img\") as HTMLImageElement\n    if (img) {\n        img.addEventListener(\"click\", e => {\n            if (e.ctrlKey) {\n                sidebarEntryOpenOne(item)\n            } else {\n\n                sidebarEntryOpenMultiple(item, mode)\n            }\n        })\n    }\n\n    let title = elem.shadowRoot?.getElementById(\"sidebar-title\") as HTMLInputElement\n    if(title) {\n        title.onchange = function() {\n            if(title.value)\n                updateInfoTitle(item.ItemId, title.value)\n        }\n    }\n\n    elem.addEventListener(\"on-screen-appear\", function(e) {\n        if (img.src !== meta.Thumbnail) {\n            img.src = meta.Thumbnail\n        }\n    })\n\n    elem.addEventListener(\"data-changed\", function(e) {\n        const event = e as CustomEvent\n        const item = event.detail.item as InfoEntry\n        const user = event.detail.user as UserEntry\n        const meta = event.detail.meta as MetadataEntry\n        const events = event.detail.events as UserEvent[]\n        updateSidebarEntryContents(item, user, meta, elem.shadowRoot as ShadowRoot)\n    })\n\n    changeSidebarItemData(item, user, meta, elem)\n\n    return elem\n}\n\nfunction renderSidebar(entries: InfoEntry[]) {\n    if (viewAllElem.checked) {\n        selectItemList(entries, mode)\n    } else {\n        selectItem(entries[0], mode)\n    }\n    clearSidebar()\n    for (let i = 0; i < entries.length; i++) {\n            renderSidebarItem(entries[i], sidebarItems)\n    }\n}\n\n"],
  "mappings": "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",
  "names": ["entries", "entry", "item", "el", "user", "meta", "titleEl", "imgEl", "typeIcon", "e", "mode", "id", "src", "elem", "img", "sidebarParent", "title", "event", "events", "i"]
}
