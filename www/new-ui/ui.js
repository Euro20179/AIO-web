function deleteEntryUI(e){confirm("Are you sure you want to delete this item")&&deleteEntry(e.ItemId).then(t=>{if(t?.status!=200){console.error(t),alert("Failed to delete item");return}alert(`Deleted: ${e.En_Title} (${e.Native_Title} : ${e.ItemId})`),updateInfo({entries:{[String(e.ItemId)]:e}},!0),deselectItem(e),removeSidebarItem(e)})}function overwriteEntryMetadataUI(e,t){confirm("Are you sure you want to overwrite the metadata with a refresh")&&overwriteMetadataEntry(t.ItemId).then(n=>{if(n.status!==200){console.error(n),alert("Failed to get metadata");return}loadMetadata().then(()=>{updateInfo({entries:{[String(t.ItemId)]:t}})})})}async function newEntryUI(){const e=document.getElementById("new-item-form");document.getElementById("new-entry")?.hidePopover();const t=new FormData(e);let n=0;const d=["is-anime","is-cartoon","is-handrawn","is-digital","is-cgi","is-live-action"];for(let r=0;r<d.length;r++){let o=d[r];t.get(o)&&(n|=2**r,t.delete(o))}let a={};for(let[r,o]of t.entries())o!=""&&(a[r]=o);a.libraryId&&a.libraryId=="0"&&delete a.libraryId;const I="?"+Object.entries(a).map(r=>`${r[0]}=${encodeURIComponent(String(r[1]))}`).join("&")+`&art-style=${n}`,m=Intl.DateTimeFormat().resolvedOptions().timeZone;let l=await fetch(`${apiPath}/add-entry${I}&timezone=${encodeURIComponent(m)}`),s=await l.text();if(l.status!==200){alert(s);return}let i=parseJsonL(mkStrItemId(s));loadMetadata().then(()=>{updateInfo({entries:{[i.ItemId]:i}})}),clearItems(),selectItem(i,mode,!0),renderSidebarItem(i)}
