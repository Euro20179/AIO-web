{
  "version": 3,
  "sources": ["globals.ts"],
  "sourcesContent": ["const apiPath = \"/api/v1\"\n\nconst urlParams = new URLSearchParams(document.location.search)\nconst uid = urlParams.get(\"uid\")\n\nif(!uid) {\n    setError(\"No user id selected\")\n}\n\nconst initialSearch = urlParams.get(\"q\")\n\nconst searchInput = document.querySelector(\"[name=\\\"search-query\\\"]\") as HTMLInputElement\nif(searchInput && initialSearch) {\n    searchInput.value = decodeURIComponent(initialSearch)\n}\n\nfunction setError(text: string) {\n    const errorOut = document.getElementById(\"error\")\n    errorOut?.setAttribute(\"data-error\", text)\n}\n\nfunction alert(text: string) {\n    const notificationsArea = document.getElementById(\"notifications\") as HTMLDivElement\n    const el = document.createElement(\"div\")\n    el.classList.add(\"notification\")\n    el.innerText = text\n    notificationsArea.append(el)\n    el.onclick = el.remove.bind(el)\n    setTimeout(el.remove.bind(el), 15000)\n}\n\nfunction promptNumber(text: string, textFail: string, numberConverter: NumberConstructor | BigIntConstructor = Number) {\n    let n = prompt(text)\n    while (n !== null && n !== \"\" && isNaN(Number(n))) {\n        n = prompt(textFail)\n    }\n    if (n === null || n === \"\") return null\n    return numberConverter(n)\n}\n\n/**\n* @description Grabs the sequence number from a string, given a list of all items in the sequence\n*/\nfunction sequenceNumberGrabber(text: string, allItems: string[]): number | null {\n    //match sequence indicator (non-word character, vol/ova/e/s)\n    //followed by sequence number (possibly a float)\n    //followed by non-word character\n    //eg: S01\n    //eg: E6.5\n    const regex = /(?:[\\W_\\-\\. EesS]|[Oo][Vv][Aa]|[Vv](?:[Oo][Ll])?\\.?)?(\\d+(?:\\.\\d+)?)[\\W_\\-\\. ]?/g\n\n    const matches = text.matchAll(regex).toArray()\n    if (matches[0] == null) {\n        return null\n    }\n    return Number(matches.filter(match => {\n        for (let item of allItems) {\n            if (item === text) continue\n\n            if (item.includes(match[0]))\n                return false\n            return true\n        }\n    })[0][1])\n}\n"],
  "mappings": "aAAA,MAAM,QAAU,UAEV,UAAY,IAAI,gBAAgB,SAAS,SAAS,MAAM,EACxD,IAAM,UAAU,IAAI,KAAK,EAE3B,KACA,SAAS,qBAAqB,EAGlC,MAAM,cAAgB,UAAU,IAAI,GAAG,EAEjC,YAAc,SAAS,cAAc,uBAAyB,EACjE,aAAe,gBACd,YAAY,MAAQ,mBAAmB,aAAa,GAGxD,SAAS,SAASA,EAAc,CACX,SAAS,eAAe,OAAO,GACtC,aAAa,aAAcA,CAAI,CAC7C,CAEA,SAAS,MAAMA,EAAc,CACzB,MAAMC,EAAoB,SAAS,eAAe,eAAe,EAC3DC,EAAK,SAAS,cAAc,KAAK,EACvCA,EAAG,UAAU,IAAI,cAAc,EAC/BA,EAAG,UAAYF,EACfC,EAAkB,OAAOC,CAAE,EAC3BA,EAAG,QAAUA,EAAG,OAAO,KAAKA,CAAE,EAC9B,WAAWA,EAAG,OAAO,KAAKA,CAAE,EAAG,IAAK,CACxC,CAEA,SAAS,aAAaF,EAAcG,EAAkBC,EAAyD,OAAQ,CACnH,IAAIC,EAAI,OAAOL,CAAI,EACnB,KAAOK,IAAM,MAAQA,IAAM,IAAM,MAAM,OAAOA,CAAC,CAAC,GAC5CA,EAAI,OAAOF,CAAQ,EAEvB,OAAIE,IAAM,MAAQA,IAAM,GAAW,KAC5BD,EAAgBC,CAAC,CAC5B,CAKA,SAAS,sBAAsBL,EAAcM,EAAmC,CAM5E,MAAMC,EAAQ,mFAERC,EAAUR,EAAK,SAASO,CAAK,EAAE,QAAQ,EAC7C,OAAIC,EAAQ,CAAC,GAAK,KACP,KAEJ,OAAOA,EAAQ,OAAOC,GAAS,CAClC,QAASC,KAAQJ,EACb,GAAII,IAASV,EAEb,MAAI,CAAAU,EAAK,SAASD,EAAM,CAAC,CAAC,CAIlC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACZ",
  "names": ["text", "notificationsArea", "el", "textFail", "numberConverter", "n", "allItems", "regex", "matches", "match", "item"]
}
