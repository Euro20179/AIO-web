@import "/css/general.css";
@import "/new-ui/css-styles/rating-styles.css";

@layer general, util, components;

@layer general {
    table {
        border-collapse: collapse;

        td,
        th {
            border: 1px solid;
        }
    }
    * {
        box-sizing: border-box;
    }

    input, button, select {
        border-color: var(--input-border-color);
    }

    hr {
        border-style: dashed;
        border-color: var(--text-color);
    }
}

@layer util {
    /*for begin/finish/etc... action buttons*/
    .action {
        font-size: 1.2rem;
        aspect-ratio: 1 / 1;
        width: 35px;
    }

    .tag {
        background-color: var(--secondary);
        border: 1px solid var(--input-border-color);
        border-radius: var(--border-roundness);
        padding: 0 3px;

        vertical-align: middle;

        text-wrap: nowrap;
    }

    .tag::before {
        content: "üè∑Ô∏é ";
        line-height: 0;
    }

    .delete {
        color: var(--red);
        border-color: var(--red);
    }
}

@layer components {
    :host(display-entry) {

        flex-grow: 1;
        /*-10px just incase*/
        min-width: calc(50cqw - var(--gap-size) - 10px);

        overflow: auto auto;

        @container (aspect-ratio < 1) {
            width: 100%;
        }

        @container (width < 800px) {
            min-height: 50%;
        }

    }

    #style-editor {
        widtH: 50cqi;
        height: 10cap;
    }

    #item-interactions {
        display: grid;
        grid-auto-flow: row;

        float: left;
        gap: 20px;

        margin: 0.4em 0 0 0.4em;

        button {
            aspect-ratio: 1 / 1;
            height: 35px;
        }
    }

    #root {
        width: 100%;
        height: 100%;
        container: entry / inline-size;
        border-right: 1px solid hsl(from var(--secondary) h s 30%);

        @container viewing-area (orientation: portrait) {
            border-bottom: 1px solid hsl(from var(--secondary) h s 30%);
            border-right: none;
        }

        color: var(--text-color);

        overflow: auto auto;
    }

    #thumbnail {
        box-shadow: 2px 2px 10px var(--blue);
        border: 1px solid var(--blue);
        align-self: center;

        width: 20cqw;

        cursor: pointer;
    }

    #thumbnail-fig {
        float: right;
        margin: 0;

        /*this way, everything in the middle of the page is cenetered nicely*/
        /*and the space to the right entirely belongs to the figure*/
        height: 90cqb;

        font-size: min(1em, 3cqw);

        max-width: 40cqw;
        overflow: auto auto;

        width: min-content;

        table {
            min-width: 20cqw;
        }

        hr {
            width: 100%;
            opacity: 50%;
            border-style: dotted;
        }
    }

    #cost::before {
        content: "$"
    }

    #new-event-button {
        align-self: center;
        width: 50cqi;
    }

    /*if the table has events, we no longer need the new event button*/
    #user-actions:has(*) + #new-event-button {
        display: none;
    }

    #user-actions {
        width: 50cqw;
        margin: 0 auto;

        text-align: center;

        counter-reset: event-no;

        .grid {
            grid-template-columns: 20% 1fr;
        }

        :is(td, th) {
            padding: 0.5em;
        }

        :is(td, th) button {
            width: fit-content;
            justify-self: center;
        }

        td:has(button) {
            text-align: center;
        }

        tr:has(button:is(:hover, :focus-visible)) {
            background: var(--secondary);
        }
    }

    #event-table-area {
        gap: 10px;
        overflow: auto auto;
    }

    #header-subtitle {
        display: grid;
        align-items: center;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));

        font-size: 0.85em;

        text-align: center;
    }

    #actions {
        justify-content: center;

        /*not sure why the bottom margin has to be double*/
        margin: 1cap 0 2cap 0;

        --gap-size: 20px;

        /*There are a couple of flexboxes within here to group thigns together*/
        &.flex,
        & .flex {
            gap: var(--gap-size);
        }
    }

    #notes:empty::before {
        content: "Edit me!";
        opacity: 50%;
    }

    #tags {
        flex-wrap: wrap;
        display: flex;
        gap: 2ch;

        /*the section containing the tags (which includes a header and notes)*/
        section:has(&) {
            display: flex;
            flex-direction: column;
        }

        /*div containing the tags which includes the new tag button*/
        div:has(> &) {
            display: flex;
            gap: 3ch;
        }

        /*each div in #tags contains a delete button and the tag itself*/
        & > div {
            display: flex;
            flex-wrap: wrap;
        }
    }

    #create-tag {
        align-self: center;
        height: fit-content;

        /*the parent that has self, but does not have an element with class=tag*/
        /*if that matches, add " tag" after #create-tag's text to show that the + mean + tag*/
        :has(> &):not(:has(.tag)) #create-tag::after {
            content: " tag";
        }
    }

    button:has(~ .tag) {
        vertical-align:  middle;
    }

    .descriptors {
        display: grid;
        @container (width > 800px) {
            grid-template-columns: 1fr 1fr;
        }
        @container (width <= 800px) {
            grid-template-rows: 1fr 1fr;
        }
        gap: 5cqi;
    }

    :is(#description, #notes) {
        max-height: 50cqb;
        overflow: auto auto;
    }

    hgroup {
        > * {
            text-wrap: balance;
        }

        margin-bottom: 10px;
    }

    #main-title {
        margin: 0;

        &:not([data-format-name="UNOWNED"])[data-format-name]::after {
            text-transform: lowercase;
            content: " (on " attr(data-format-name)")";
        }

        &[data-format-name="UNOWNED"]::after  {
            text-transform: lowercase;
            content: " (unowned)";
        }

        &::before {
            content: attr(data-type-icon) " ";
        }
    }

    :host(display-entry:not([data-user-status="Viewing"])) #entry-progressbar-position-label {
        display: none;
    }

    #view-count::before {
        content: "Viewed: "
    }

    #view-count::after {
        content: " times (" attr(data-time-spent, "Unknown") " hours)"
    }

    #entry-progressbar {
        justify-self: center;
        width: 25cqw;
        margin: 0;

        #entry-progressbar-position-label {
            line-height: 0;
            margin-top: -1cap;
            text-align: right;
            margin-right: calc(1ch);

            color: var(--secondary);
        }
    }

    #entry-progressbar:where(:not([max]), [value="0"]) {
        display: none;

        /*this figcaption displays the x/y for how far along the user is*/
        &~figcaption {
            display: none;
        }
    }

    #entry-progressbar {
        background: var(--blue);
        width: 100%;
    }

    #entry-progressbar[max]::-moz-progress-bar,
    #entry-progressbar[max]::-webkit-progress-bar {
        background: var(--green);
    }

    #identify-items:popover-open {
        display: flex;
        flex-wrap: wrap;
    }


    :is(#descendants-section, #copies-section) div {
        display: flex;
        flex-wrap: wrap;

        gap: 2em;

        button {
            padding: 0.5em;
        }

        img {
            width: 10cqi;
            cursor: pointer;
        }

        :not(img) {
            height: fit-content;
            align-self: center;
        }
    }
}
