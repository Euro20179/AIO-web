{
  "version": 3,
  "sources": ["calc.ts"],
  "sourcesContent": ["const calcItems = document.getElementById(\"calc-items\") as HTMLDivElement\nconst expressionInput = document.getElementById(\"calc-expression\") as HTMLTextAreaElement\n\nconst modeCalc: DisplayMode = {\n    add(entry, updateStats = true) {\n        updateStats && changeResultStatsWithItem(entry)\n        renderCalcItem(entry)\n    },\n\n    sub(entry, updateStats = true) {\n        updateStats && changeResultStatsWithItem(entry, -1)\n        removecCalcItem(entry)\n    },\n\n    addList(entry, updateStats = true) {\n        updateStats && changeResultStatsWithItemList(entry, 1)\n        for (let item of entry) {\n            renderCalcItem(item)\n        }\n    },\n\n    subList(entry, updateStats = true) {\n        updateStats && changeResultStatsWithItemList(entry, -1)\n        for (let item of entry) {\n            removecCalcItem(item)\n        }\n    },\n\n    *_getValidEntries() {\n        const selected = Object.groupBy(globalsNewUi.selectedEntries, item => String(item.ItemId))\n        let elems = calcItems.querySelectorAll(`[data-item-id]`)\n\n        for (let elem of elems) {\n            let val = Number(elem.getAttribute(\"data-expression-output\"))\n            let id = elem.getAttribute(\"data-item-id\")\n\n            if (!id || val <= 0 || !selected[id]) continue\n\n            yield selected[id][0]\n        }\n    },\n\n    putSelectedInCollection() {\n        const collectionName = prompt(\"Id of collection\")\n        if (!collectionName) return\n\n        let waiting = []\n        for (let item of this._getValidEntries()) {\n            waiting.push(setParent(item.ItemId, BigInt(collectionName)))\n        }\n        Promise.all(waiting).then(res => {\n            for (let r of res) {\n                console.log(r.status)\n            }\n        })\n    },\n\n    addTagsToSelected() {\n        const tags = prompt(\"tags (, seperated)\")\n        if (!tags) return\n\n        const tagsList = tags.split(\",\")\n        for (let item of this._getValidEntries()) {\n            addEntryTags(item.ItemId, tagsList)\n        }\n    }\n}\n\nexpressionInput.onchange = function() {\n    for (let entry of globalsNewUi.selectedEntries) {\n        let val = updateExpressionOutput(entry)\n        let el = calcItems.querySelector(`[data-item-id=\"${entry.ItemId}\"]`)\n        el?.setAttribute(\"data-expression-output\", val.jsStr())\n    }\n}\n\nfunction updateExpressionOutput(item: InfoEntry) {\n    let expr = expressionInput.value\n\n    let meta = findMetadataById(item.ItemId)\n    let user = findUserEntryById(item.ItemId)\n\n    let all = { ...item, ...meta, ...user }\n    let symbols = makeSymbolsTableFromObj(all)\n\n    let val = new Str(`${meta?.Description || \"\"}<br>${meta?.Rating || 0}`)\n    if (expr) {\n        val = parseExpression(expr, symbols)\n    }\n    return val\n}\n\nfunction removecCalcItem(item: InfoEntry) {\n    let el = calcItems.querySelector(`[data-item-id=\"${item.ItemId}\"]`)\n    el?.remove()\n}\n\n\nfunction renderCalcItem(item: InfoEntry, parent: HTMLElement | DocumentFragment = calcItems) {\n    let el = document.createElement(\"calc-entry\")\n\n    let root = el.shadowRoot\n    if (!root) return\n\n\n    let meta = findMetadataById(item.ItemId)\n\n    let val = updateExpressionOutput(item)\n\n    let name = root.getElementById('name') as HTMLElement\n    name.innerText = item.En_Title\n\n    let img = root.getElementById(\"calc-thumbnail\") as HTMLImageElement\n    if (meta?.Thumbnail) {\n        img.src = meta?.Thumbnail\n    }\n    parent.append(el)\n    el.setAttribute(\"data-expression-output\", String(val.jsStr()))\n    el.setAttribute(\"data-item-id\", String(item.ItemId))\n}\n\nfunction sortCalcDisplay() {\n    let elements = [...calcItems.querySelectorAll(`[data-item-id]`)]\n    elements.sort((a, b) => {\n        let exprA = /**@type {string}*/(a.getAttribute(\"data-expression-output\"))\n        let exprB = /**@type {string}*/(b.getAttribute(\"data-expression-output\"))\n        return Number(exprB) - Number(exprA)\n    })\n    calcItems.innerHTML = \"\"\n    for (let elem of elements) {\n        calcItems.append(elem)\n    }\n}\n"],
  "mappings": "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",
  "names": ["entry", "updateStats", "item", "selected", "elems", "elem", "val", "id", "collectionName", "waiting", "res", "r", "tags", "tagsList", "expr", "meta", "user", "all", "symbols", "parent", "el", "root", "name", "img", "elements", "a", "b", "exprA", "exprB"]
}
