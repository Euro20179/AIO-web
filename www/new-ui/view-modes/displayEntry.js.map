{
  "version": 3,
  "sources": ["displayEntry.ts"],
  "sourcesContent": ["let displayQueue: InfoEntry[] = []\n\nfunction handleRichText(e: KeyboardEvent) {\n    const actions: Record<string, () => ([string, string[]] | [string, string[]][])> = {\n        \"b\": () => [\"bold\", []],\n        \"i\": () => [\"italic\", []],\n        \"h\": () => [\"hiliteColor\", [prompt(\"highlight color (yellow)\") || \"yellow\"]],\n        \"f\": () => [\"foreColor\", [prompt(\"Foreground color (black)\") || \"black\"]],\n        \"t\": () => [\"fontName\", [prompt(\"Font name (sans-serif)\") || \"sans-serif\"]],\n        \"T\": () => [\"fontSize\", [prompt(\"Font size (12pt)\") || \"12pt\"]],\n        \"I\": () => [\"insertImage\", [prompt(\"Image url (/favicon.ico)\") || \"/favicon.ico\"]],\n        \"e\": () => [\n            [\"enableObjectResizing\", []],\n            [\"enableAbsolutePositionEditor\", []],\n            [\"enableInlineTableEditing\", []],\n        ],\n        \"s\": () => [\"strikeThrough\", []],\n        \"u\": () => ['underline', []],\n        \"m\": () => [\"insertHTML\", [getSelection()?.toString() || prompt(\"html (html)\") || \"html\"]],\n        \"f12\": () => [\"removeFormat\", []]\n    }\n    if (!e.ctrlKey) return\n    let key = e.key\n    if (key in actions) {\n        let res = actions[key]()\n        if (typeof res[0] === \"string\") {\n            let [name, args] = res\n            //@ts-ignore\n            document.execCommand(name, false, ...args)\n        } else {\n            for (let [name, args] of res) {\n                //@ts-ignore\n                document.execCommand(name, false, ...args)\n            }\n        }\n        e.preventDefault()\n    }\n}\n\n\nasync function itemIdentification(form: HTMLFormElement) {\n    form.parentElement?.hidePopover()\n    let data = new FormData(form)\n\n    let provider = data.get(\"provider\") as string\n\n    let queryType = data.get(\"query-type\") as \"by-title\" | \"by-id\"\n\n    let search = data.get(\"search\") as string\n\n    let shadowRoot = form.getRootNode() as ShadowRoot\n\n    let itemId = shadowRoot.host.getAttribute(\"data-item-id\")\n\n    if (!itemId) {\n        alert(\"Could not get item id\")\n        return\n    }\n\n    let finalItemId = \"\"\n\n    switch (queryType) {\n        case \"by-title\":\n            let titleSearchContainer = shadowRoot.getElementById(\"identify-items\") as HTMLDialogElement\n            finalItemId = await titleIdentification(provider, search, titleSearchContainer)\n            break\n        case \"by-id\":\n            finalItemId = search\n            break\n    }\n    finalizeIdentify(finalItemId, provider, BigInt(itemId))\n        .then(loadMetadata)\n        .then(() => {\n            let newItem = globalsNewUi.entries[itemId]\n            updateInfo({ entries: { [String(itemId)]: newItem } })\n        })\n}\n\nasync function titleIdentification(provider: string, search: string, selectionElemOutput: HTMLElement): Promise<string> {\n    let res = await identify(search, provider)\n    let text = await res.text()\n    let [_, rest] = text.split(\"\\x02\")\n\n    let items: any[]\n    try {\n        items = rest.split(\"\\n\").filter(Boolean).map(v => JSON.parse(v))\n    }\n    catch (err) {\n        console.error(\"Could not parse json\", rest.split('\\n'))\n        return \"\"\n    }\n\n    while (selectionElemOutput.children.length) {\n        selectionElemOutput.firstChild?.remove()\n    }\n\n    selectionElemOutput.showPopover()\n\n    return await new Promise(RETURN => {\n        for (let result of items) {\n            console.log(result)\n            let fig = document.createElement(\"figure\")\n\n            let img = document.createElement(\"img\")\n            img.src = result.Thumbnail\n            img.style.cursor = \"pointer\"\n            img.width = 100\n\n            img.addEventListener(\"click\", _e => {\n                selectionElemOutput.hidePopover()\n                RETURN(result.ItemId)\n            })\n\n            let title = document.createElement(\"h3\")\n            title.innerText = result.Title || result.Native_Title\n            title.title = result.Native_Title || result.Title\n\n            fig.append(title)\n            fig.append(img)\n            selectionElemOutput.append(fig)\n        }\n    })\n}\n\n\nfunction saveItemChanges(root: ShadowRoot, item: InfoEntry) {\n    if (!confirm(\"Are you sure you want to save changes?\")) {\n        return\n    }\n\n    const userEn_title = root.getElementById(\"main-title\") as HTMLHeadingElement\n\n    if (userEn_title) {\n        item.En_Title = userEn_title.innerText\n    }\n\n    let userEntry = findUserEntryById(item.ItemId)\n    if (!userEntry) return\n\n    const customStylesElem = root.getElementById(\"style-editor\") as HTMLTextAreaElement\n\n    setUserExtra(userEntry, \"styles\", customStylesElem.value)\n\n    let notes = (root?.getElementById(\"notes\"))?.innerHTML\n    if (notes === \"<br>\") {\n        notes = \"\"\n    }\n    userEntry.Notes = notes || \"\"\n\n    let infoTable = root.getElementById(\"info-raw\")\n    let metaTable = root.getElementById(\"meta-info-raw\")\n    if (!infoTable || !metaTable) return\n\n    const updateWithTable: (table: Element, item: InfoEntry | MetadataEntry) => void = (table, item) => {\n        for (let row of table?.querySelectorAll(\"tr\") || []) {\n            let nameChild = row.firstElementChild as HTMLElement\n            let valueChild = row.firstElementChild?.nextElementSibling as HTMLElement\n            let name = nameChild.innerText.trim()\n            let value = valueChild.innerText.trim()\n            if (!(name in item)) {\n                console.log(`${name} NOT IN ITEM`)\n                continue\n            } else if (name === \"ItemId\") {\n                console.log(\"Skipping ItemId\")\n                continue\n            }\n            let ty = item[name as keyof typeof item]?.constructor\n            if(!ty) continue\n            //@ts-ignore\n            item[name] = ty(value)\n        }\n    }\n\n    updateWithTable(infoTable, item)\n    let meta = findMetadataById(item.ItemId)\n    if (!meta) return\n    updateWithTable(metaTable, meta)\n\n\n    const infoStringified = mkIntItemId(\n        JSON.stringify(\n            item,\n            (_, v) => typeof v === 'bigint' ? String(v) : v\n        )\n    )\n\n    const metaStringified = mkIntItemId(\n        JSON.stringify(\n            meta, (_, v) => typeof v === 'bigint' ? String(v) : v\n        )\n    )\n\n    const userStringified = mkIntItemId(\n        JSON.stringify(\n            userEntry,\n            (_, v) => typeof v === \"bigint\" ? String(v) : v\n        )\n    )\n\n    let promises = []\n\n    let engagementSet = fetch(`${apiPath}/engagement/set-entry`, {\n        body: userStringified,\n        method: \"POST\"\n    })\n        .then(res => res.text())\n        .then(console.log)\n        .catch(console.error)\n\n    promises.push(engagementSet)\n\n    let entrySet = fetch(`${apiPath}/set-entry`, {\n        body: infoStringified,\n        method: \"POST\"\n    })\n        .then(res => res.text())\n        .then(console.log)\n        .catch(console.error)\n\n    promises.push(entrySet)\n\n    let metaSet = fetch(`${apiPath}/metadata/set-entry`, {\n        body: metaStringified,\n        method: \"POST\"\n    }).then(res => res.text())\n        .then(console.log)\n        .catch(console.error)\n\n    promises.push(metaSet)\n    updateInfo({\n        entries: { [String(item.ItemId)]: item },\n        userEntries: { [String(item.ItemId)]: userEntry },\n        metadataEntries: { [String(item.ItemId)]: meta }\n    })\n}\n\nfunction changeDisplayItemData(item: InfoEntry, user: UserEntry, meta: MetadataEntry, events: UserEvent[], el: HTMLElement) {\n    const e = new CustomEvent(\"data-changed\", {\n        detail: {\n            item,\n            user,\n            meta,\n            events,\n        }\n    })\n    el.dispatchEvent(e)\n    el.setAttribute(\"data-item-id\", String(item.ItemId))\n}\n\nfunction mkGenericTbl(root: HTMLElement, data: Record<any, any>) {\n    let html = `\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Value</th>\n                    </tr>\n                </thead>\n                <tbody>\n            `\n\n    for (let key in data) {\n        html += `<tr><td>${key}</td><td contenteditable>${data[key]}</td></tr>`\n    }\n    html += \"</tbody>\"\n    root.innerHTML = html\n}\n\nconst displayEntryIntersected: Set<string> = new Set()\n\nfunction onIntersection(entries: IntersectionObserverEntry[]) {\n    for (let entry of entries) {\n        const entryId = entry.target.getAttribute(\"data-item-id\") || \"NA\"\n        if (entry.isIntersecting && displayQueue.length && !displayEntryIntersected.has(entryId)) {\n            displayEntryIntersected.add(entryId)\n\n            let newItem = displayQueue.shift()\n            if (!newItem) continue\n            modeDisplayEntry.add(newItem, false)\n        }\n    }\n}\n\nfunction newEvent(form: HTMLFormElement) {\n    const data = new FormData(form)\n    const name = data.get(\"name\")\n    if (name == null) {\n        alert(\"Name required\")\n        return\n    }\n    const tsStr = data.get(\"timestamp\")\n    const aftertsStr = data.get(\"after\")\n    //@ts-ignore\n    let ts = new Date(tsStr).getTime()\n    if (isNaN(ts)) {\n        ts = 0\n    }\n    //@ts-ignore\n    let afterts = new Date(aftertsStr).getTime()\n    if (isNaN(afterts)) {\n        afterts = 0\n    }\n    const itemId = getIdFromDisplayElement(form)\n    apiRegisterEvent(itemId, name.toString(), ts, afterts)\n        .then(res => res.text())\n        .then(() => {\n            updateInfo({\n                events: [\n                    {\n                        Timestamp: ts,\n                        After: afterts,\n                        Event: name.toString(),\n                        ItemId: itemId,\n                        TimeZone: \"\"\n                    }\n                ]\n            })\n            form.parentElement?.hidePopover()\n        })\n        .catch(alert)\n    //TODO: should be a modal thing for date picking\n}\n\nconst observer = new IntersectionObserver(onIntersection, {\n    root: document.getElementById(\"entry-output\"),\n    rootMargin: \"0px\",\n    threshold: 0.1\n})\n\nconst modeDisplayEntry: DisplayMode = {\n    add(entry, updateStats = true) {\n        updateStats && changeResultStatsWithItem(entry)\n        renderDisplayItem(entry)\n    },\n\n    sub(entry, updateStats = true) {\n        updateStats && changeResultStatsWithItem(entry, -1)\n        removeDisplayItem(entry)\n    },\n\n    refresh(id) {\n        let info = findInfoEntryById(id)\n        if (!info) return\n\n        refreshDisplayItem(info)\n    },\n\n    addList(entry, updateStats = true) {\n        displayEntryIntersected.clear()\n\n        updateStats && changeResultStatsWithItemList(entry, 1)\n        for (let i = 0; i < entry.length; i++) {\n            if (i > 5) {\n                displayQueue.push(entry[i])\n            } else {\n                renderDisplayItem(entry[i])\n            }\n        }\n    },\n\n    subList(entry, updateStats = true) {\n        updateStats && changeResultStatsWithItemList(entry, -1)\n\n        const itemIdsToRemove = entry.map(v => v.ItemId)\n        displayQueue = displayQueue.filter(i => !itemIdsToRemove.includes(i.ItemId))\n\n        for (let item of entry) {\n            removeDisplayItem(item)\n        }\n    },\n\n    putSelectedInCollection() {\n        const selected = globalsNewUi.selectedEntries\n        const collectionName = prompt(\"Id of collection\")\n        if (!collectionName) return\n\n        let waiting = []\n        for (let item of selected) {\n            waiting.push(setParent(item.ItemId, BigInt(collectionName)))\n        }\n        Promise.all(waiting).then(res => {\n            for (let r of res) {\n                console.log(r.status)\n            }\n        })\n    },\n\n    addTagsToSelected() {\n        const tags = prompt(\"tags (, seperated)\")\n        if (!tags) return\n\n        const tagsList = tags.split(\",\")\n        for (let item of globalsNewUi.selectedEntries) {\n            addEntryTags(item.ItemId, tagsList)\n        }\n        //FIXME: tags do not update immediately\n    }\n}\n\nfunction hookActionButtons(shadowRoot: ShadowRoot, item: InfoEntry) {\n\n    let multiActionButton = shadowRoot.querySelector('[data-action=\"Begin+Pause+Resume\"]')\n\n    if (multiActionButton) {\n        multiActionButton.addEventListener(\"click\", _ => {\n            let user = findUserEntryById(item.ItemId)\n            if (!user) return\n\n            let action = \"\"\n\n            const tz = Intl.DateTimeFormat().resolvedOptions().timeZone\n\n            if (canBegin(user.Status)) {\n                action = \"begin\"\n            } else if (canResume(user.Status)) {\n                action = \"resume\"\n            } else if (canPause(user.Status)) {\n                action = \"pause\"\n            }\n\n            if (!action) {\n                alert(\"Cannot begin, resume, or pause\")\n                return\n            }\n\n            if (!confirm(`Are you sure you want to ${action} this entry`)) {\n                return\n            }\n\n            fetch(`${apiPath}/engagement/${action?.toLowerCase()}-media?id=${user.ItemId}&timezone=${encodeURIComponent(tz)}`)\n                .then(res => res.text())\n                .then(text => {\n                    alert(text)\n\n                    loadUserEvents().then(() =>\n                        updateInfo({\n                            entries: {\n                                [String(item.ItemId)]: item\n                            },\n                        })\n                    )\n                })\n        })\n    }\n\n    for (let btn of shadowRoot.querySelectorAll(\"[data-action]\") || []) {\n        let action = btn.getAttribute(\"data-action\")\n\n        //this action does multiple things\n        if (action?.includes(\"+\")) continue\n\n        btn.addEventListener(\"click\", _ => {\n            if (!confirm(`Are you sure you want to ${action} this entry`)) {\n                return\n            }\n\n            let queryParams = `?id=${item.ItemId}`\n            if (action === \"Finish\") {\n                let rating = promptNumber(\"Rating\", \"Not a number\\nRating\")\n                if (rating !== null) {\n                    queryParams += `&rating=${rating}`\n                }\n            }\n\n            const tz = Intl.DateTimeFormat().resolvedOptions().timeZone\n            fetch(`${apiPath}/engagement/${action?.toLowerCase()}-media${queryParams}&timezone=${encodeURIComponent(tz)}`)\n                .then(res => res.text())\n                .then(text => {\n                    alert(text)\n                    loadUserEvents().then(() =>\n                        updateInfo({\n                            entries: {\n                                [String(item.ItemId)]: item\n                            }\n                        })\n                    )\n                })\n        })\n    }\n\n\n    let imgEl = shadowRoot.getElementById(\"thumbnail\") as HTMLImageElement\n    const fileUpload = (shadowRoot.getElementById(\"thumbnail-file-upload\")) as HTMLInputElement\n\n    fileUpload.onchange = async function(_) {\n        const reader = new FileReader()\n        const blob = fileUpload.files?.[0]\n        if (!blob) return\n        reader.readAsDataURL(blob)\n        reader.onload = () => {\n            if (!reader.result) return\n            let result = reader.result.toString()\n            updateThumbnail(item.ItemId, result)\n                .then(() => {\n                    let meta = findMetadataById(item.ItemId)\n                    if (!meta) {\n                        refreshInfo().then(() => {\n                            refreshDisplayItem(item)\n                            refreshSidebarItem(item)\n                        })\n                    } else {\n                        meta.Thumbnail = result\n                        updateInfo({\n                            entries: {\n                                [String(item.ItemId)]: item\n                            },\n                            metadataEntries: {\n                                [String(item.ItemId)]: meta\n                            }\n                        })\n                    }\n                })\n        }\n    }\n    imgEl.onclick = function(_) {\n        if (!fileUpload) return\n\n        fileUpload.click()\n        console.log(fileUpload.value)\n    }\n}\n\nfunction updateCostDisplay(el: ShadowRoot, item: InfoEntry) {\n    const costEl = el.getElementById(\"cost\") as HTMLSpanElement\n\n    const includeSelf = (el.getElementById(\"include-self-in-cost\") as HTMLInputElement).checked\n    const includeChildren = (el.getElementById(\"include-children-in-cost\") as HTMLInputElement).checked\n    const includeCopies = (el.getElementById(\"include-copies-in-cost\") as HTMLInputElement).checked\n\n    let costTotal = 0\n    if (includeSelf) {\n        costTotal += item.PurchasePrice\n    }\n    if (includeChildren) {\n        let children = Object.values(globalsNewUi.entries).filter(v => v.ParentId === item.ItemId)\n        for (let child of children) {\n            costTotal += child.PurchasePrice\n        }\n    }\n    if (includeCopies) {\n        let copies = Object.values(globalsNewUi.entries).filter(v => v.CopyOf === item.ItemId)\n        for (let copy of copies) {\n            costTotal += copy.PurchasePrice\n        }\n    }\n    costEl.innerText = String(costTotal)\n}\n\nfunction createRelationButtons(elementParent: HTMLElement, relationGenerator: Generator<InfoEntry>) {\n    let relationships = relationGenerator.toArray()\n    let titles = relationships.map(i => i.En_Title)\n    relationships = relationships.sort((a, b) => {\n        return (sequenceNumberGrabber(a.En_Title, titles) || 0) - (sequenceNumberGrabber(b.En_Title, titles) || 0)\n    })\n    for (let child of relationships) {\n        let meta = findMetadataById(child.ItemId)\n        let el: HTMLElement\n        if (meta?.Thumbnail) {\n            el = document.createElement(\"img\")\n            formatToName(child.Format).then(name => {\n                el.title = `${child.En_Title} (${typeToSymbol(child.Type)} on ${name})`\n            })\n            //@ts-ignore\n            el.src = meta.Thumbnail\n        } else {\n            el = document.createElement(\"button\")\n            el.innerText = child.En_Title\n        }\n        elementParent.append(el)\n        el.onclick = () => toggleItem(child)\n    }\n}\n\nfunction updateDisplayEntryContents(item: InfoEntry, user: UserEntry, meta: MetadataEntry, events: UserEvent[], el: ShadowRoot) {\n    const displayEntryTitle = el.getElementById(\"main-title\") as HTMLHeadingElement\n    const displayEntryNativeTitle = el.getElementById(\"official-native-title\") as HTMLHeadingElement\n    const imgEl = el.getElementById(\"thumbnail\") as HTMLImageElement\n    const descEl = el.getElementById(\"description\") as HTMLParagraphElement\n    const notesEl = el.getElementById(\"notes\") as HTMLParagraphElement\n    const ratingEl = el.getElementById(\"user-rating\") as HTMLSpanElement\n    const audienceRatingEl = el.getElementById(\"audience-rating\") as HTMLElement\n    const infoRawTbl = el.getElementById(\"info-raw\") as HTMLTableElement\n    const metaRawtbl = el.getElementById(\"meta-info-raw\") as HTMLTableElement\n    const viewCountEl = el.getElementById(\"view-count\") as HTMLSpanElement\n    const progressEl = el.getElementById(\"entry-progressbar\") as HTMLProgressElement\n    const captionEl = el.getElementById(\"entry-progressbar-position-label\") as HTMLElement\n    const mediaInfoTbl = el.getElementById(\"media-info\") as HTMLTableElement\n    const eventsTbl = el.getElementById(\"user-actions\") as HTMLTableElement\n    const customStyles = el.getElementById(\"custom-styles\") as HTMLStyleElement\n\n    //Cost\n    updateCostDisplay(el, item)\n\n    let userExtra = getUserExtra(user, \"styles\")\n    let styles = userExtra || \"\"\n    customStyles.innerText = styles\n\n    //tags\n    const tagsRoot = el.getElementById(\"tags\") as HTMLDivElement\n    tagsRoot.innerHTML = \"\"\n    for (let tag of item.Tags || []) {\n        tag = tag.trim()\n        if (!tag) continue\n        const outer = document.createElement(\"div\")\n\n        const del = document.createElement(\"button\")\n        del.innerText = \"\uD83D\uDDD1\"\n        del.classList.add(\"delete\")\n\n        del.onclick = function() {\n            deleteEntryTags(item.ItemId, [tag])\n                .then(res => {\n                    if (res.status !== 200) return \"\"\n                    res.text().then(() => {\n                        item.Tags = item.Tags.filter((t: string) => t != tag)\n                        changeDisplayItemData(item, user, meta, events, el.host as HTMLElement)\n                    })\n                })\n                .catch(console.error)\n        }\n\n        outer.append(del)\n\n        const span = document.createElement(\"span\")\n        span.classList.add(\"tag\")\n        span.innerText = tag\n\n        outer.append(span)\n\n        tagsRoot?.append(outer)\n    }\n\n    //type icon\n    let typeIcon = typeToSymbol(item.Type)\n    displayEntryTitle?.setAttribute(\"data-type-icon\", typeIcon)\n\n\n    //format\n    formatToName(item.Format).then(name => {\n        displayEntryTitle?.setAttribute(\"data-format-name\", name)\n    })\n\n\n    //Title\n    displayEntryTitle.innerText = meta.Title || item.En_Title\n    //only set the title of the heading to the user's title if the metadata title exists\n    //otherwise it looks dumb\n    if (meta.Title && item.En_Title) {\n        displayEntryTitle.title = item.En_Title\n    }\n\n    //Native title\n    displayEntryNativeTitle.innerText = meta.Native_Title || item.Native_Title\n    //Same as with the regular title\n    if (meta.Native_Title && item.Native_Title) {\n        displayEntryNativeTitle.title = item.Native_Title\n    }\n\n    //Thumbnail\n    imgEl.alt = meta.Title || item.En_Title\n    imgEl.src = meta.Thumbnail\n\n\n    //Description\n    descEl.innerHTML = meta.Description\n\n    //Notes\n    notesEl.innerHTML = user.Notes\n\n    //Rating\n    if (user.UserRating) {\n        applyUserRating(user.UserRating, ratingEl)\n        ratingEl.innerHTML = String(user.UserRating)\n    } else {\n        ratingEl.innerText = \"Unrated\"\n    }\n\n    //Audience Rating\n    let max = meta.RatingMax\n    if (meta.Rating) {\n        let rating = meta.Rating\n        let normalizedRating = rating\n        if (max !== 0) {\n            normalizedRating = rating / max * 100\n        }\n        applyUserRating(normalizedRating, audienceRatingEl)\n        audienceRatingEl.innerHTML = String(rating)\n    } else if (audienceRatingEl) {\n        audienceRatingEl.innerText = \"Unrated\"\n    }\n\n    //Info table raw\n    mkGenericTbl(infoRawTbl, item)\n\n    //Meta table raw\n    let data = meta\n    mkGenericTbl(metaRawtbl, data)\n\n    //View count\n    let viewCount = user.ViewCount\n    if (viewCount) {\n        let mediaDependant\n        try {\n            mediaDependant = JSON.parse(data[\"MediaDependant\"])\n        } catch (err) {\n            console.error(\"Could not parse media dependant meta info json\")\n            return\n        }\n        viewCountEl.setAttribute(\"data-time-spent\", String(Number(viewCount) * Number(mediaDependant[\"Show-length\"] || mediaDependant[\"Movie-length\"] || 0) / 60 || \"unknown\"))\n        viewCountEl.innerText = String(viewCount)\n    }\n\n\n    //Media dependant\n    let type = item.Type\n    type = String(type)\n    let mediaDeptData\n    try {\n        mediaDeptData = JSON.parse(meta.MediaDependant)\n    }\n    catch (err) {\n        console.error(\"Could not parse json\", meta.MediaDependant)\n        return\n    }\n    //remove the <Media>- part from the key looks ugly\n    let modifiedKeys: { [k: string]: string } = {}\n    for (let key in mediaDeptData) {\n        const val = mediaDeptData[key]\n        key = key.split(\"-\").slice(1).join(\" \")\n        modifiedKeys[key] = val\n    }\n    mkGenericTbl(mediaInfoTbl, modifiedKeys)\n\n\n    el.host.setAttribute(\"data-user-status\", user.Status)\n    if (mediaDeptData[`${type}-episodes`] && user.Status === \"Viewing\") {\n        progressEl.max = mediaDeptData[`${type}-episodes`]\n\n        let pos = Number(user.CurrentPosition)\n        progressEl.value = pos\n\n        captionEl.innerText = `${pos}/${progressEl.max}`\n        captionEl.title = `${Math.round(pos / progressEl.max * 1000) / 10}%`\n    }\n\n    //Current position\n    progressEl.title = user.CurrentPosition\n    if (progressEl.max) {\n        progressEl.title = `${user.CurrentPosition}/${progressEl.max}`\n    }\n\n    //relation elements\n    for(let relationship of [[\"descendants\", findDescendants], [\"copies\", findCopies]] as const) {\n        let relationshipEl = el.getElementById(relationship[0]) as HTMLElement\n        relationshipEl.innerHTML = \"\"\n        createRelationButtons(relationshipEl, relationship[1](item.ItemId))\n    }\n\n    //Events\n    if (events.length) {\n        let html = `\n            <thead>\n                <tr>\n                    <!-- this nonsense is so that the title lines up with the events -->\n                    <th>\n                        <div class=\"grid column\">\n                            <button popovertarget=\"new-event-form\">\u2795\uFE0E</button><span style=\"text-align: center\">Event</span>\n                        </div>\n                    </th>\n                    <th>Time</th>\n                </tr>\n            </thead>\n            <tbody>\n        `\n        for (let event of events) {\n            const ts = event.Timestamp\n            const afterts = event.After\n            const timeZone = event.TimeZone || \"UTC\"\n            const name = event.Event\n\n            let date = new Date(event.Timestamp)\n            let afterDate = new Date(event.After)\n            let timeTd = \"\"\n            if (ts !== 0) {\n                let time = date.toLocaleTimeString(\"en\", { timeZone })\n                let dd = date.toLocaleDateString(\"en\", { timeZone })\n                timeTd = `<td title=\"${time} (${timeZone})\">${dd}</td>`\n            } else if (afterts !== 0) {\n                let time = afterDate.toLocaleTimeString(\"en\", { timeZone })\n                let dd = afterDate.toLocaleDateString(\"en\", { timeZone })\n                timeTd = `<td title=\"${time} (${timeZone})\">after: ${dd}</td>`\n            } else {\n                timeTd = `<td title=\"unknown\">unknown</td>`\n            }\n            html += `<tr>\n                        <td>\n                            <div class=\"grid column\">\n                                <button class=\"delete\" onclick=\"deleteEvent(this, ${ts}, ${afterts})\">\uD83D\uDDD1</button>\n                                ${name}\n                            </div>\n                        </td>\n                            ${timeTd}\n                        </tr>`\n        }\n        html += \"</tbody>\"\n        eventsTbl.innerHTML = html\n    } else {\n        //there are no events\n        eventsTbl.innerHTML = \"\"\n    }\n}\n\nfunction renderDisplayItem(item: InfoEntry, parent: HTMLElement | DocumentFragment = displayItems) {\n    let el = document.createElement(\"display-entry\")\n\n    observer.observe(el)\n\n    let meta = findMetadataById(item.ItemId)\n    let user = findUserEntryById(item.ItemId)\n    let events = findUserEventsById(item.ItemId)\n    if (!user || !meta || !events) return\n\n    parent.append(el)\n\n    let root = el.shadowRoot\n    if (!root) return\n\n    const includeSelf = (root.getElementById(\"include-self-in-cost\") as HTMLInputElement)\n    const includeChildren = (root.getElementById(\"include-children-in-cost\") as HTMLInputElement)\n    const includeCopies = (root.getElementById(\"include-copies-in-cost\") as HTMLInputElement)\n\n    for (let input of [includeSelf, includeCopies, includeChildren]) {\n        input.onchange = function() {\n            updateCostDisplay(root, item)\n        }\n    }\n\n\n    let extra = getUserExtra(user, \"styles\")\n\n    let styleEditor = root.getElementById(\"style-editor\") as HTMLTextAreaElement\n    styleEditor.value = extra || \"\"\n    styleEditor.addEventListener(\"change\", e => {\n        const customStyles = root.getElementById(\"custom-styles\") as HTMLStyleElement\n        customStyles.innerText = styleEditor.value\n    })\n\n    let newChildButton = root.getElementById(\"new-child\") as HTMLButtonElement\n    newChildButton.addEventListener(\"click\", e => {\n        const newEntryDialog = document.getElementById(\"new-entry\") as HTMLDialogElement\n        const parentIdInput = newEntryDialog.querySelector(`[name=\"parentId\"]`) as HTMLInputElement\n        parentIdInput.value = String(item.ItemId)\n        newEntryDialog.showPopover()\n    })\n\n    const newChildByIdInput = root.getElementById(\"new-child-by-id\") as HTMLInputElement\n\n    newChildByIdInput.onchange = function() {\n        let childId = BigInt(newChildByIdInput.value)\n        let info = findInfoEntryById(childId)\n        if (!info) return\n        info.ParentId = item.ItemId\n        setParent(childId, item.ItemId).then(() => {\n            updateInfo({\n                entries: {\n                    [String(item.ItemId)]: item,\n                    [newChildByIdInput.value]: info\n                }\n            })\n        })\n    }\n\n    hookActionButtons(root, item)\n\n    const newTag = (root.getElementById(\"create-tag\")) as HTMLButtonElement\n    newTag.onclick = function() {\n        const name = prompt(\"Tag name (, seperated)\")\n        if (!name) return\n        let names = name.split(\",\")\n        item.Tags = item.Tags?.concat(names) || names\n        addEntryTags(item.ItemId, name.split(\",\"))\n            .then(res => {\n                if (res.status !== 200) return \"\"\n                res.text().then(() => changeDisplayItemData(item, user, meta, events, el))\n            })\n            .catch(console.error)\n    }\n\n    el.addEventListener(\"data-changed\", function(_e) {\n        let e = _e as CustomEvent\n        const event = e\n        const item = /**@type {InfoEntry}*/(event.detail.item)\n        const user = /**@type {UserEntry}*/(event.detail.user)\n        const meta = /**@type {MetadataEntry}*/(event.detail.meta)\n        const events = /**@type {UserEvent[]}*/(event.detail.events)\n        updateDisplayEntryContents(item, user, meta, events, el.shadowRoot as ShadowRoot)\n    })\n\n    changeDisplayItemData(item, user, meta, events, el)\n\n    for (let el of root.querySelectorAll(\"[contenteditable]\")) {\n        (el as HTMLElement).addEventListener(\"keydown\", handleRichText)\n    }\n}\n\nfunction removeDisplayItem(item: InfoEntry) {\n    displayEntryIntersected.delete(String(item.ItemId))\n    const el = /**@type {HTMLElement}*/(displayItems.querySelector(`[data-item-id=\"${item.ItemId}\"]`))\n    if (!el) return\n    el.remove()\n    observer.unobserve(el)\n}\n\nfunction refreshDisplayItem(item: InfoEntry) {\n    let el = document.querySelector(`display-entry[data-item-id=\"${item.ItemId}\"]`) as HTMLElement\n    if (el) {\n        let user = findUserEntryById(item.ItemId)\n        let events = findUserEventsById(item.ItemId)\n        let meta = findMetadataById(item.ItemId)\n        if (!user || !events || !meta) return\n        changeDisplayItemData(item, user, meta, events, el)\n    } else {\n        renderDisplayItem(item)\n    }\n}\n\nfunction getIdFromDisplayElement(element: HTMLElement) {\n    let rootNode = element.getRootNode() as ShadowRoot\n    let host = rootNode.host\n    if (!host) {\n        return 0n\n    }\n    return BigInt(String(host.getAttribute(\"data-item-id\")))\n}\n\nfunction displayEntryAction(func: (item: InfoEntry, root: ShadowRoot) => any) {\n    return function(elem: HTMLElement) {\n        let id = getIdFromDisplayElement(elem)\n        let item;\n        (item = findInfoEntryById(id)) && func(item, elem.getRootNode() as ShadowRoot)\n    }\n}\n\nconst displayEntryDelete = displayEntryAction(item => deleteEntryUI(item))\nconst displayEntryRefresh = displayEntryAction((item, root) => overwriteEntryMetadataUI(root, item))\nconst displayEntrySave = displayEntryAction((item, root) => saveItemChanges(root, item))\nconst displayEntryClose = displayEntryAction(item => deselectItem(item))\n\nconst displayEntryEditStyles = displayEntryAction((item, root) => {\n    const styleEditor = root.getElementById(\"style-editor\") as HTMLTextAreaElement\n    styleEditor.hidden = !styleEditor.hidden\n})\n\nconst displayEntryCopyTo = displayEntryAction(item => {\n    let id = promptNumber(\"Copy user info to (item id)\", \"Not a number, mmust be item id number\", BigInt)\n    if (id === null) return\n    let idInt = BigInt(id)\n\n    copyUserInfo(item.ItemId, idInt)\n        .then(res => res?.text())\n        .then(console.log)\n})\n\nconst displayEntryViewCount = displayEntryAction(item => {\n    let count = promptNumber(\"New view count\", 'Not a number, view count')\n    if (count === null) return\n\n    fetch(`${apiPath}/engagement/mod-entry?id=${item.ItemId}&view-count=${count}`)\n        .then(res => res.text())\n        .then(alert)\n        .then(() => {\n            let user = findUserEntryById(item.ItemId)\n            if (!user) {\n                refreshInfo().then(() => {\n                    refreshDisplayItem(item)\n                })\n            } else {\n                user.ViewCount = Number(count)\n                updateInfo({\n                    entries: {\n                        [String(item.ItemId)]: item\n                    },\n                    userEntries: {\n                        [String(item.ItemId)]: user\n                    }\n                })\n            }\n        })\n        .catch(console.error)\n})\n\nconst displayEntryProgress = displayEntryAction(async (item, root) => {\n    let progress = root.getElementById(\"entry-progressbar\") as HTMLProgressElement\n\n    let newEp = promptNumber(\"Current position:\", \"Not a number, current position\")\n    if (!newEp) return\n\n    await setPos(item.ItemId, String(newEp))\n    root.host.setAttribute(\"data-user-current-position\", String(newEp))\n    progress.value = Number(newEp)\n})\n\nconst displayEntryRating = displayEntryAction(item => {\n    let user = findUserEntryById(item.ItemId)\n    if (!user) {\n        alert(\"Failed to get current rating\")\n        return\n    }\n    let newRating = prompt(\"New rating\")\n    if (!newRating || isNaN(Number(newRating))) {\n        return\n    }\n\n    fetch(`${apiPath}/engagement/mod-entry?id=${item.ItemId}&rating=${newRating}`)\n        .then(() => {\n            let user = findUserEntryById(item.ItemId)\n            if (!user) {\n                return refreshInfo()\n            }\n            user.UserRating = Number(newRating)\n            updateInfo({\n                entries: {\n                    [String(item.ItemId)]: item\n                },\n                userEntries: {\n                    [String(item.ItemId)]: user\n                }\n            })\n        })\n        .catch(console.error)\n    apiRegisterEvent(item.ItemId, `rating-change - ${user?.UserRating} -> ${newRating}`, Date.now(), 0).catch(console.error)\n})\n\nfunction deleteEvent(el: HTMLElement, ts: number, after: number) {\n    if (!confirm(\"Are you sure you would like to delete this event\")) {\n        return\n    }\n    const itemId = getIdFromDisplayElement(el)\n    apiDeleteEvent(itemId, ts, after)\n        .then(res => res.text())\n        .then(() =>\n            loadUserEvents()\n                .then(() => updateInfo({\n                    entries: { [String(itemId)]: globalsNewUi.entries[String(itemId)] }\n                }))\n        )\n        .catch(alert)\n\n}\n"],
  "mappings": "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",
  "names": ["actions", "key", "res", "name", "args", "form", "data", "provider", "queryType", "search", "shadowRoot", "itemId", "finalItemId", "titleSearchContainer", "newItem", "selectionElemOutput", "text", "_", "rest", "items", "v", "RETURN", "result", "fig", "img", "_e", "title", "root", "item", "userEn_title", "userEntry", "customStylesElem", "notes", "infoTable", "metaTable", "updateWithTable", "table", "row", "nameChild", "valueChild", "value", "ty", "meta", "infoStringified", "metaStringified", "userStringified", "promises", "engagementSet", "entrySet", "metaSet", "user", "events", "el", "e", "html", "entries", "entry", "entryId", "tsStr", "aftertsStr", "ts", "afterts", "updateStats", "id", "info", "i", "itemIdsToRemove", "selected", "collectionName", "waiting", "r", "tags", "tagsList", "multiActionButton", "action", "tz", "btn", "queryParams", "rating", "imgEl", "fileUpload", "reader", "blob", "costEl", "includeSelf", "includeChildren", "includeCopies", "costTotal", "children", "child", "copies", "copy", "elementParent", "relationGenerator", "relationships", "titles", "a", "b", "displayEntryTitle", "displayEntryNativeTitle", "descEl", "notesEl", "ratingEl", "audienceRatingEl", "infoRawTbl", "metaRawtbl", "viewCountEl", "progressEl", "captionEl", "mediaInfoTbl", "eventsTbl", "customStyles", "styles", "tagsRoot", "tag", "outer", "del", "t", "span", "typeIcon", "max", "normalizedRating", "viewCount", "mediaDependant", "type", "mediaDeptData", "modifiedKeys", "val", "pos", "relationship", "relationshipEl", "event", "timeZone", "date", "afterDate", "timeTd", "time", "dd", "parent", "input", "extra", "styleEditor", "newEntryDialog", "parentIdInput", "newChildByIdInput", "childId", "newTag", "names", "element", "host", "func", "elem", "idInt", "count", "progress", "newEp", "newRating", "after"]
}
